apiVersion: batch/v1
kind: Job
metadata:
  name: setup-job
spec:
  template:
    spec:
      containers:
      - args:
           - |-
             schema_endpoint=http://dgraph-public:8080/admin/schema
             setup_endpoint=http://supplychain-api:8099/ssdservice/v1/setup
             echo "Checking the Pod Status of Dgraph,Supply Chain API and Token Machine"
             wait_period=0
             while true
             do
             kubectl get po -n {{ .Release.Namespace }} -o jsonpath='{range .items[*]}{..metadata.name}{"\t"}{..containerStatuses..ready}{"\n"}{end}' > live.status
             DGRAPH=$(grep dgraph-0 live.status | awk '{print $2}')
             SUPPLYCHAINAPI=$(grep supplychain-api live.status | awk '{print $2}')
             TOKENMACHINE=$(grep token-machine live.status | awk '{print $2}')
             wait_period=$(($wait_period+10))
             if [ "$DGRAPH" == "true" ] && [ "$SUPPLYCHAINAPI" == "true" ] && [ "$TOKENMACHINE" == "true" ];
             then
             sleep 10
             echo "############******Adding the Dgraph Schema*********#######################"
             SCHEMA_CHECK=`curl -X POST -H "Content-Type: application/json" --data-binary "$(cat /tmp/schema/schema.graphql)" $schema_endpoint`
             echo $SCHEMA_CHECK | grep -i Success
             if [ $? -eq 0 ]; then
                echo "##############***Sucesfully Updated the Dgraph Schema***########################"
             else
                echo "##############***Failed to Updated the Dgraph Schema***#########################"
                exit 1
             fi
             sleep 30
             echo "#################*****Executing the Setup API Schema****##########################"
             RESP=`curl -X POST -H "Content-Type: application/json" --data-binary "$(cat /tmp/setup.json)" $setup_endpoint`
             echo "#################*****Feteching the Supply Chain Api Token Secret******################"
             kubectl -n {{ .Release.Namespace }} get secret supplychain-api-token -o jsonpath='{.data.token}' | base64 -d > secretdata
             echo "################******Updating the Orgnaisation Name and Cluster Name******##############"
             curl -X POST http://dgraph-public:8080/graphql -H "Content-Type: application/json" -H "X-OpsMx-Auth: Bearer $(cat secretdata)" -d '{"query": "query QueryDeploymentTarget {queryDeploymentTarget(filter: { name: { eq: \"{{ .Values.clustername }}\" } }) @cascade{id organization(filter: { name: { eq: \"{{ .Values.organisationname }}\" } }) { id}}}"}' > seconddata
             instanceid=$(yq eval '.data.queryDeploymentTarget[0].id' seconddata)
             orgid=$(yq eval '.data.queryDeploymentTarget.[0].organization.id' seconddata)
             yq eval '.orgID = "'$orgid'"' /tmp/token/token > org.json
             yq eval '.instance = "'$instanceid'"' org.json > full.json
             cat full.json
             curl -X POST http://token-machine:8050/api/v1/createServiceToken -H "Content-Type: application/json" -H "X-OpsMx-Auth: Bearer $(cat secretdata)" -d @full.json > tokencreate
             kubectl -n {{ .Release.Namespace }} get secret kubedetector -o jsonpath='{.data.*}' | base64 -d > config.yaml
             value=$(yq eval '.token' tokencreate)
             sed -i 's/token: .*"xxxx"/token: "'$value'"/g' config.yaml
             kubectl -n {{ .Release.Namespace }} delete secret kubedetector
             echo "#############****Creating the Kubedetector Secret****####################################"
             kubectl -n {{ .Release.Namespace }} create secret generic kubedetector --from-file=config.yaml
             sleep 1
             kubectl -n {{ .Release.Namespace }} rollout restart deploy kubernetes-detector
             break
             else
             if [ $wait_period -gt 1000 ];
             then
             echo "#############****Script is timed out as the Dgraph and Supply chain is not ready yet****########"
             break
             else
             echo "############****Waiting for Dgraph,Supply chain and Token machine services to be ready*****#########"
             sleep 10
             fi
             fi
             done
        command:
          - /bin/bash
          - +x
          - '-c'
        image: quay.io/opsmxpublic/opsmx-custom-binaries:kubectl-spin-cli-git-bash-jq-yq
        imagePullPolicy: IfNotPresent
        name: setup-update
        volumeMounts:
        - mountPath: /tmp/schema
          name: dgraph-schema
        - mountPath: /tmp
          name: setup-update
        - mountPath: /tmp/token
          name: token-test
      serviceAccountName: dgraph-schema-configure-{{ .Release.Namespace }}
      restartPolicy: OnFailure
      volumes:
      - name: dgraph-schema
        configMap:
          name: schema-cm
      - name: setup-update
        configMap:
          name: setup-cm
      - name: token-test
        configMap:
          name: test-cm
